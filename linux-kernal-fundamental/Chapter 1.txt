Kernel
------
  - mostly it is named is vmlinuz-<Kernel Version>
  - bootloader runs the kernel
  - kernel has parameter; that is passed by grub
  
- Kernel has an API
  - System calls
  - Virtual file system 
    - proc
    sys
    debugfs
  - Device files

- Kernel is a gatekeeper
  - root process
  - selinux
  - access to hardware and other resources
  
- Kernel is modular
  - kernel is small.
  - sufficient to boot to user space
  
kernel pwd  = /boot
  specially vmlinuz
  
kernel version = uname -r
** check the version number from uname and /boot to compare name which is kernel file

getting hardware info
  - lshw
  - lspci
  - lsusb
  - lsblk
  - lscpu
  - lsdev
  
command to configure and control hardware
  - hdparm
  - use 'echo' to control proc, dev, sys files
  - inb
  - outb
  - setpci
  
  
understanding system calls
  - there are about 300 system call   <--- aint nobody got time for this.
  - unistd.h  <--- key header file    <--- aint nobody got time for this.
                                                          *** there is man page for every system-call
    -------------                                             ---------------------------------------
   | Application |
    -------------
          |
   -----------------
   | Calls Library |
   -----------------
          |
   -----------------
   | System Calls  |
   |    Kernel     | ===================================
   -----------------                                   |
   If there is error; library it return negative value |
   If no-error; library will return positive or 0      |
  ======================================================
   
   Kernel function    <---- baby much fun.
    - printk()
                      - log daemon got all the log of the kernel if is configure dah! 'syslog'
    - dmesg   <--- show ram buffer message 'best hommie'
      how to follow the kernel or just following log.
        - tail -f /var/log/messages
            - and run some kernel code

  Virtual fs 'not a ramdisk'
    - proc      <--- toggle variable
    - sysfs

  PID   <--- it is in /proc ; containing a lot of info... give it to meeeeeeeeee....
  
  
  /sys <-- sysfs
    - kernel object
    - what connected to what
    - PCI device info. baby
    
    
  device file
    - character and block drivers use device file.
    - it has major, minor number and type (c or b)
    
    
  drivers and device files
    open(), read(), write(), and ioctl()    <--- C language <-- old stuff; but golden as f*
      what is happening
      -----------------
        - echo hi > /dev/null 
          1. it open
          2. then write.
          
          
    PID <--- this shit backkkk!!!
    
    run some command.
      - go to /proc
      - htop and find the process
      - cd to that pid
      - tada!! a lot of info!!  <--- profit
        - check the soft-link   <--- don't know that; go home.
         -  just bunch of text that calls the kernel
         
         
   check out the /dev/null  <----
    ls -l /dev/null     <--- look at the 'c'haracter and {1, 3} <-- 1 is major and 3 is minor. <--- remember meee..
      - the important is; if the file is character and has 1, 3 as its major and minor; that shit null.
        - /dev/zero   <---- {1, 5}
        
        
    GO TO SLEEEEEEEPP. DO IT 2MORROWWWW..
