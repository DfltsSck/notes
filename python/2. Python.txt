# Hints
  def = def is defining the function.
  
Functions
=========
  # Just like linux bash functions
    ==============================
  def looper():
    for x in range(0,10):
      print("Works")
  --> looper()
  
  def x(one,two):
    return (one + two)
  --> x(10,12)
    --> 24 <--- this is the output.

Abs and Bool
=============
  # abs is absolute value
    =====================
  abs(-10)
    --> 10
  # bool is 0's and 1's
    ===================
  bool("ab")
    ---> True
  bool("0")
    ---> False <---- because 0 is false and 1 is true and other number is true.

Help and Dir
============
  # Dir is helper of the command or functiom that can be used.
    ===
  dir(["x"])
  
  # Help will help what is does.
    ====
  help(x)
  
Eval and Exec
=============
  Eval
  ====
    # it does evaluate.
      Example:
        eval("print("hello")")
        --> hello
  Exec
  ====
    # similar does both; but exec does multi-line.
  
Str, Int, Float
===============
  String
  ======
    string isn't integer.
      str(14) <--- this is string, not a integer.
  Int
  ===
    # Int is integer.
    ##  Converting String number into integer.
        Example:
          x = int(10)
            print x
            ## or you can do complex with scraping and converting string into integer and do if, then else statement.
  Float
  =====
    # float is deals with decimals; in division or multiplication or other operation.
      float("12.123321")
Len
===
  Len = is a length
    len("hello")
    --> 4 <-- counting 'h' as a 0
    
====
Classes Object Orientated Programming
=====================================
  Classes:
  =======
    Example:
      class x:
        def __init__(self,first,second): <--- __init__ <-- initial
            self.first = first
            self.second = second
            
      x1 = x("bobby",12)
      --> x1.first
      ---> bobby <--- get the value from x1.first
  
  function in class
  ==================
    class x:
      def __init__(self,first,second):
        self.first = first
        self.second = second
      def y(self):
        return("yyy " + self.first + " and " + self.second)
    
    s = x("apple","ball")
--> s.y()
--> yyy apple and ball <--- the output.

  Class Attributes
  ================
    class x:
      def __init__(self,first,second):
        self.first = first
        self.second = second
        
        
    x1 = x("apple",12)
    x2 = x("ball",10)
    --
    hasattr(x1,"second") <--- hasattr is command to know if the set has a attributes.
  ->True  
    --
    setattr(x1,'third',"8th")   <-- set the atrributes
    hasattr(x1,"third")  <--- now it has thrid attirbuted.
    --
    getattr(x1,"third")
  ->"8th"
    delattr <--- this is basically work as upper attributes; except it delete attributes.


  Inheritence <<--- this will get crazy if you try to read it, just run and you might understand.
  ===========
  class Parent:
    counter = 10
    def __init__(self):
      print("Muhhaaa")
    def parentFunc(self):
      print("parentFunc hahahaha")
    def setCounter(self,num):
      Parent.counter = num
    def showCounter(self):
      print(str(Parent.counter))
      
  
  class Child(Parent):  <---- insert Parent in bracket will make this Child a child of parent.
    def __init(self):
      print("I am sorry papa")
    def childFunc(self):
      print("T.. F...")
  
  
  c = Child()
  c.childFunc()
  
  
  Overriding Methods
  ==================
    class Parent:
      def func(self):
        print("parent fun")
        
    class Child(Parent):
      def func(self):
        print("child func")
        
    c = Child()
    c.func()
  ->child func <--- overriding parend function.
