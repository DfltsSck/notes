Legends
=======
  => is not a python symbol, it is way to know answer.

Basic Stuff
===========
Commenting = #
Indent = 4 spaces of tab "It is not necessay but looks readable."
Python is Case Senstive


Variables:
=========
  Basic Assignment
  ================
  x = 'age'
    show x is age
  x != age
    doesn't work
  x = 14
  x = '14'
    both work but:
      without quote is number
      and with quote is string.
  
  Multiple Assignment
  ===================
  x,y,z='apple','ball','car'
    Basically assigning variable fast
  x = y = z = 'apple'
    Gives every variable holder same value.
  
  Operator Variables
  ==================
  x = 1
  y = 2
    z = x + y
      z = 3
  * Similar way of doing for sub, divide, multiply.
  
  Adding Variable Strings
  =======================
  x = 'hello'
  y = 'world'
    z = x + y
      z = 'hello world'
  
  Slicing Variable Stings
  =======================
  x = 'apple is yummy'
    x[4] = 'e'  --->> look at the bracket. and indexing at 0; a is 0, and p is 1.
    x[0:] = 'apple is yummy'
    x[0:3] = 'app'
    x[2:4] = 'pl'
    
  Arrays
  ======
  x = ["apple", "bell", "car"]
    x = ["apple", "bell", "car"]
    x[0] = 'apple'
    x[2] = 'car'
  Substitue Arrays Values.
  =======================
  x = ["apple", "bell", "car"]
    x[2] = "carrot"
    x = ["apple", "bell", "carrot"]
    
  Delete Array
  ============
    x = ["apple", "bell", "car"]
      del x[2]
      x => ["apple", "bell"]
  Length Array
  ============
    x = ["apple", "bell", "car"]
      len(x) => 2
  Max, and Min of Array
  =====================
    x = ["1", "2", "3"]
      max(x) => 3
      min(x) => 1
  Append Array
  ============
    x = ["apple", "bell", "car"]
      x.append("dell") => ["apple", "bell", "car", "dell"]
  Count Array
  ===========
    x = ["apple", "bell", "car"]
      x.count("apple") => 1

Dictionaries
============
  x = {"one",11,"two",12,"three",14}  =>>> looks like json.
    x[one] => 11
  Update Dictionaries
  ===================
    x["one"] = 12
      now,
        x["one"] => 12
  Delete Dictionaries
  ===================
    del x["one"]
      x => ["two",12,"three",14]
  Dictionaries Functions 'unordered result'
  ======================
    x = {"one",11,"two",12,"three",14}
      x.keys() =>> (['one','two','three'])
    x = {"one",11,"two",12,"three",14}
      x.values() =>> (['11','12','14'])
Tuples 'It cannot be changed'
=============================
  tup1 = ("Maths",23,"Dogs")
    tup1.append("asd") =>> doesn't work
    del tup1["Maths"] =>> doesn't work
  tup1 = ("Cheese") =>> It works
    tup1 => 'Cheese'
  
    
  

Loops:
========
  For loop
  ========
  # basically range does seq does in linux. Checkout the comma','.
    for x in range(0,10):
      print x
      
  While loop
  ==========
  # It will loop forever. Google for incremental another while loop tricks.  
    x = 10
    while x < 20:
      print x
      
      
========









Reference:
==========
https://www.youtube.com/watch?v=rkx5_MRAV3A
